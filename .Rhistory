for ( i in 1:6) {
}
temp
temp<-c()
temp <- append(temp, distance( c(x[i], y[i], c(4,4))}
}
}
temp<-c()
}
temp <- c()
for ( i in 1:6 ) {
temp <- append(temp, distance( c(x[i], y[i], c(4,4) ) )
}
fruits <- data.frame(
'재료'= c('사과','베이컨','바나나','당근','셀러리','치즈'),
'단맛'= c(10,1,10,7,3,1),
'아삭한맛'= c(9,4,1,10,10,1),
'음식종류'= c('과일','단백질','과일','채소','채소','단백질')
)
fruits
view(fruits)
View(fruits)
temp <-c() #거리를 담을 변수
for (i in 1:6 ) { temp<- append(temp, distance( c(fruits$단맛[i], fruits$아삭한맛[i], c(6,4))}
temp
for (i in 1:6 ) { temp<- append(temp, distance( c(fruits$단맛[i], fruits$아삭한맛[i], 토마토)}
for (i in 1:6 ) { temp<- append(temp, distance( c(fruits$단맛[i], fruits$아삭한맛[i], 토마토)}
for (i in 1:6 ) { temp<- append(temp, distance( c(fruits$단맛[i], fruits$아삭한맛[i], 토마토))}
for (i in 1:6 ) { temp<- append(temp, distance( c(fruits$단맛[i], fruits$아삭한맛[i], 토마토)))}
temp
temp <-c() #거리를 담을 변수
for (i in 1:6 ) { temp<- append(temp, distance( c(fruits$단맛[i], fruits$아삭한맛[i], 토마토)))}
temp
for (i in 1:6 ) { temp<- append(temp, distance( c(fruits$단맛[i], fruits$아삭한맛[i], c(6,4) ) ))}
for (i in 1:6 ) { temp<- append(temp, distance( c(fruits$단맛[i], fruits$아삭한맛[i], c(6,4) ) ) )}
for (i in 1:6 ) { temp<- append(temp, distance( c(fruits$단맛[i], fruits$아삭한맛[i], c(6,4) ) ) ) }
for (i in 1:6 ) { temp<- append(temp, distance( c(fruits$단맛[i], fruits$아삭한맛[i], c(6,4) ) ) }
fruits <- data.frame(
'재료'=c('사과', '베이컨', '바나나', '당근', '샐러리', '치즈'),
'단맛'=c(10, 1, 10, 7, 3, 1),
'아삭한맛'=c(9,4,1,10,10,1),
'음식종류'=c('과일', '단백질', '과일', '채소', '채소','단백질')
)
토마토 =c(6,4)
temp <- c() # 거리를 담을 변수
for ( i in 1:6) {
temp <- append( temp, U_dis(c(fruits$단맛[i], fruits$아삭한맛[i]), 토마토))
}
temp
fruits$dist <- temp
View(fruits)
fruits <- data.frame(
'재료'=c('사과', '베이컨', '바나나', '당근', '샐러리', '치즈'),
'단맛'=c(10, 1, 10, 7, 3, 1),
'아삭한맛'=c(9,4,1,10,10,1),
'음식종류'=c('과일', '단백질', '과일', '채소', '채소','단백질')
)
View(fruits)
토마토 =c(6,4)
temp <- c() # 거리를 담을 변수
for ( i in 1:6) {
temp <- append( temp, U_dis(c(fruits$단맛[i], fruits$아삭한맛[i]), 토마토))
}
temp
fruits$dist <- temp
View(fruits)
temp <- append( temp, distance(c(fruits$단맛[i], fruits$아삭한맛[i]), 토마토))
temp
fruits$dist <- temp
View(fruits)
library(dplyr)
fruits$rnk <-dense_rank(fruits$dist)
View(frutis)
View(fruits)
fruits [fruits$rnk <=3, '음식종류']
a<-fruits[fruits$rnk <=3, '음식종류']
table(a)[table(a)==max(table(a))]
max(table(a))
table(a)
print(summary(table2))
library(outliers)
library(outliers)
grubbs.flag <- function(x) {
outliers <- NULL
test <- x
grubbs.result <- grubbs.test(test)
pv <- grubbs.result$p.value
while(pv < 0.05) {
outliers <- c(outliers,as.numeric(strsplit(grubbs.result$alternative," ")[[1]][3]))
test <- x[!x %in% outliers]
grubbs.result <- grubbs.test(test)
pv <- grubbs.result$p.value
}
return(data.frame(X=x,Outlier=(x %in% outliers)))
}
setwd("/Users/macbook/Documents/itwill/R/9781788295864_Code/Chapter02")
car<-read.csv("wisc_bc_data.csv")
wisc<-read.csv("wisc_bc_data.csv", header = T, stringsAsFactors = F)
setwd("/Users/macbook/Documents/itwill/R/9781788295864_Code/Chapter02")
wisc<-read.csv("wisc_bc_data.csv", header = T, stringsAsFactors = F)
library(outliers)
grubbs.flag <- function(x) {
outliers <- NULL
test <- x
grubbs.result <- grubbs.test(test)
pv <- grubbs.result$p.value
while(pv < 0.05) {
outliers <- c(outliers,as.numeric(strsplit(grubbs.result$alternative," ")[[1]][3]))
test <- x[!x %in% outliers]
grubbs.result <- grubbs.test(test)
pv <- grubbs.result$p.value
}
return(data.frame(X=x,Outlier=(x %in% outliers)))
}
wisc <- read.csv("wisc_bc_data.csv")
for (i in 3:length(colnames(wisc))){
a = grubbs.flag(wisc[,colnames(wisc)[i]])
b = a[a$Outlier==TRUE,"Outlier"]
print ( paste( colnames(wisc)[i] , '--> ',  length(b) )  )
}
library(outliers)
grubbs.flag <- function(x) {
outliers <- NULL
test <- x
grubbs.result <- grubbs.test(test)
pv <- grubbs.result$p.value
while(pv < 0.05) {
outliers <- c(outliers,as.numeric(strsplit(grubbs.result$alternative," ")[[1]][3]))
test <- x[!x %in% outliers]
grubbs.result <- grubbs.test(test)
pv <- grubbs.result$p.value
}
return(data.frame(X=x,Outlier=(x %in% outliers)))
}
setwd("/Users/macbook/Documents/itwill/R/9781788295864_Code/Chapter02")
wisc <- read.csv("wisc_bc_data.csv")
for (i in 3:length(colnames(wisc))){
a = grubbs.flag(wisc[,colnames(wisc)[i]])
b = a[a$Outlier==TRUE,"Outlier"]
print ( paste( colnames(wisc)[i] , '--> ',  length(b) )  )
}
setwd("/Users/macbook/Documents/itwill/R/9781788295864_Code/Chapter02")
wisc <- read.csv("wisc_bc_data.csv")
wisc <- read.csv("wisc_bc_data.csv")
setwd("/Users/macbook/Documents/itwill/R")
wisc <- read.csv("wisc_bc_data.csv")
library(outliers)
grubbs.flag <- function(x) {
outliers <- NULL
test <- x
grubbs.result <- grubbs.test(test)
pv <- grubbs.result$p.value
while(pv < 0.05) {
outliers <- c(outliers,as.numeric(strsplit(grubbs.result$alternative," ")[[1]][3]))
test <- x[!x %in% outliers]
grubbs.result <- grubbs.test(test)
pv <- grubbs.result$p.value
}
return(data.frame(X=x,Outlier=(x %in% outliers)))
}
setwd("/Users/macbook/Documents/itwill/R")
wisc <- read.csv("wisc_bc_data.csv")
for (i in 3:length(colnames(wisc))){
a = grubbs.flag(wisc[,colnames(wisc)[i]])
b = a[a$Outlier==TRUE,"Outlier"]
print ( paste( colnames(wisc)[i] , '--> ',  length(b) )  )
}
colSums(is.na(wisc))
setwd("/Users/macbook/Documents/itwill/R")
wbcd <- read.csv("wisc_bc_data.csv", header=T, stringsAsFactors=FALSE)
str(wbcd)
wbcd$diagnosis<-factor(wbcd$diagnosis, levels=c("B","M"), labels=c("Benign", 'Maliganant"))
str(wbcd)
wbcd$diagnosis<-factor(wbcd$diagnosis, levels=c("B","M"), labels=c("Benign", 'Maliganant"))
str(wbcd)
wbcd$diagnosis<-factor(wbcd$diagnosis, levels=c("B","M"), labels=c("Benign", 'Maliganant"))
str(wbcd)
wbcd$diagnosis<-factor(wbcd$diagnosis, levels=c("B","M"), labels=c("Benign", 'Maliganant"))
str(wbcd)
wbcd$diagnosis<-factor(wbcd$diagnosis, levels=c("B","M"), labels=c("Benign", 'Maliganant"))
str(wbcd)
wbcd$diagnosis<-factor(wbcd$diagnosis, levels=c("B","M"), labels=c("Benign", 'Maliganant"))
str(wbcd)
wbcd$diagnosis<-factor(wbcd$diagnosis, levels=c("B","M"), labels=c("Benign", 'Maliganant"))
wbcd$diagnosis<-factor(wbcd$diagnosis, levels=c("B","M"), labels=c("Benign", 'Maliganant"))
sample(10)
wbcd$diagnosis<-factor(wbcd$diagnosis, levels=c("B","M"), labels=c("Benign", 'Maliganant"))
sample(10)
wbcd$diagnosis<-factor(wbcd$diagnosis, levels=c("B","M"), labels=c("Benign", 'Maliganant"))
sample(10)
wbcd$diagnosis<-factor(wbcd$diagnosis, levels=c("B","M"), labels=c("Benign", 'Maliganant"))
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
wbcd_shuffle <- wbcd[sample(nrow(wbcd)), ]
wbcd_shuffle
wbcd$diagnosis <- factor(wbcd$diagnosis, levels=c("B","M"), labels=c("Benign", 'Maliganant"))
wbcd$diagnosis <- factor(wbcd$diagnosis, levels=c("B","M"), labels=c("Benign", 'Maliganant"))
)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels=c("B","M"), labels=c("Benign", "Maliganant"))
str(wbcd)
wbcd2 <- wbcd_shuffle[ , -1] #첫번째 열(-1)이 제외됨
str(sbcd2)
str(wbcd2)
#정규화하기
normalize <- function(x) {
return ((x-min(x)) / (max(x) - min(x) ) )
}
#설명: 입력된 값 / 최대값 - 최소값
wbcd_n <- as.data.frame(lapply(wbcd2[ , 2:31], normalize))
#설명: 셔플시킨 wbcd2 데이터 2~31번 을 normalize 함수에 적용시켜서 데이터를 변환하고 그리고 데이터프레임으로 구성
summary(wbcd_n) #전부 0~1사이의 데이터로 변환되었는지 확인
nrow(Wbcd_n) $569
train_num <- round(0.9 * now(wbcd_n), 0)
train_num #512
wbcd_train <- wbcd_n[1:train_num, ] #훈련데이터를 1~512까지 구성하고
wbcd_test <- wbcd_n[ (train_num+1) : nrow(wbcd_n), ]
nrow(wbcd_test) #57
nrow(wbcd_n) #569
train_num <- round(0.9 * now(wbcd_n), 0)
train_num <- round(0.9 * nrow(wbcd_n), 0)
train_num #512
wbcd_train <- wbcd_n[1:train_num, ] #훈련데이터를 1~512까지 구성하고
wbcd_test <- wbcd_n[ (train_num+1) : nrow(wbcd_n), ]
nrow(wbcd_test) #57
str(wbcd)
wbcd_train_label <-wbcd2[1:train_num, 1]
wbcd_test_label <-wbcd2[(train_num+1) : nrow(wbcd_n), 1]
wbcd_test_label
install.packages("class")
library(class)
result1 <- knn(train=wbcd_train, test=wbcd_test, cl=wbcd_train_label, k=21)
result1
data.frame(result1, wbcd_test_label)
sum(result1 == wbcd_test_label) #전체 테스트 데이터(57개) 중 몇개 맞았는지 나옴
x <- data.frame('실제'=wbcd_test_label, '예측'=result1)
table(x)
source(my_func2.R)
R()
source('my_func222.R')
source('my_func2.R')
source('my_func.R')
my_func()
my_func2()
my_func()
my_func()
my_func <- function() {
bar <- function() {
fname <- file.choose()
table <- read.csv(fname, header=T, stringsAsFactor=F,  fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table)))
xcol_num <- as.numeric(readline('x축 컬럼 번호: '))
ycol_num <- as.numeric(readline('y축 컬럼 번호: '))
xcol <- colnames(table[xcol_num])
ycol <- colnames(table[ycol_num])
xcol2 <- table[,xcol]
ycol2 <- table[,ycol]
y_max <- max(ycol2)  + 100
barplot(ycol2, main=paste(xcol,'과',ycol,'의 막대 그래프'), names.arg=xcol2,
col=c('Green Yellow'), density=80, ylim= c(0,y_max), beside=T)
par(family="AppleGothic")
}
pie2 <- function(){
fname <- file.choose()
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8")
print(data.table(colnames(table)))
xcol_num <- as.numeric(readline('x축 컬럼 번호: '))
ycol_num <- as.numeric(readline('y축 컬럼 번호: '))
xcol <- colnames(table[xcol_num])
ycol <- colnames(table[ycol_num])
xcol2 <- table[,xcol]
ycol2 <- table[,ycol]
y_labels <- round( ycol2/ sum(ycol2) *100, 1)
y_labels2 <-paste(xcol2, y_labels, '%')
pie( ycol2 , main=paste(ycol ,'의 원형 그래프') , labels=y_labels2, col=rainbow(15) )
}
x1 <- menu( c('막대 그래프', '원형 그래프'),
title=" 숫자를 선택하세요 ~ "  )
switch( x1,
gp1 = {   bar()   },
gp2 = {   pie2()  }
)
}
my_func()
library(data.table)
cat("\n Welcome to Sora's research !! ")
cat()
cat("\n Welcome to Sora's research !! ")
setwd("/Users/macbook/Documents/itwill/R")
dept <- read.csv("dept.csv")
setwd("/Users/macbook/Documents/itwill/R")
emp <- read.csv("emp3.csv")
emplibrary(utils)
emp <- read.csv("emp3.csv")
emplibrary(utils)
library(utils)
emplibrary(utils)
r()
cat()
source('my_func.R')
source('my_func2.R')
my_func <- function() {
sanpodo <- function() {
fname <- file.choose()
table <- read.csv(fname, header=T, stringsAsFactor=F )
print(data.table(colnames(table)))
xcol_num <- as.numeric(readline('x축 컬럼 번호: '))
ycol_num <- as.numeric(readline('y축 컬럼 번호: '))
xcol <- colnames(table[xcol_num])
ycol <- colnames(table[ycol_num])
xcol2 <- table[,xcol]
ycol2 <- table[,ycol]
plot(xcol2,ycol2,
main=paste(xcol,'과',ycol,'의 산포도 그래프'),,lwd=2,             xlab=xcol,ylab=ycol,col='red',pch=21,bg='red')
}
my_hist <- function() {
fname <- file.choose()
table <- read.csv(fname, header=T, stringsAsFactor=F )
print(data.table(colnames(table)))
xcol_num <- as.numeric(readline('x축 컬럼 번호: '))
xcol <- colnames(table[xcol_num])
xcol2 <- table[,xcol]
class1 <- sort(xcol2)
hist(class1 , col="yellow", density=80,
main="히스토그램 정규분포 그래프" )
par(new=T)
plot( class1, dnorm( class1, mean=mean(class1),
sd=sd(class1)),type='l', axes=FALSE, ann=FALSE,
col="red")
}
my_box <- function() {
fname <- file.choose()
table <- read.csv(fname, header=T, stringsAsFactor=F )
print(data.table(colnames(table)))
xcol_num <- as.numeric(readline('x축 컬럼 번호: '))
xcol <- colnames(table[xcol_num])
xcol2 <- table[,xcol]
boxplot(xcol2, col="green", density=80 )
}
my_pie <- function() {
fname <- file.choose()
table <- read.csv(fname, header=T, stringsAsFactor=F )
print(data.table(colnames(table)))
xcol_num <- as.numeric(readline('x축 컬럼 번호: '))
xcol <- colnames(table[xcol_num])
xcol2 <- table[,xcol]
label2 <- round( prop.table( table(xcol2)) * 100, digits=1)
label3 <- paste( names(label2), label2, '%')
pie ( label2 , label=label3, col=c("Green","skyblue") )
}
x1 <- menu( c('산포도 그래프','히스토그램 그래프','사분위수 그래프',
'원형그래프') ,
title='숫자를 선택하세요 ~' )
switch ( x1,
san1 = {   sanpodo()                  } ,
san2 = {   my_hist()                  } ,
san3 = {   my_box()                   } ,
san4 = {   my_pie()                   }
)
}
my_func()
my_func <- function() {
bar <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
ycol_num <- as.numeric(readline('y축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
ycol <- colnames(table[ycol_num])   # y축 컬럼명을 담는 코드
xcol2 <- table[,xcol] # 예: emp[, "empno"]
ycol2 <- table[,ycol] #  y 축 컬럼의 데이터를 ycol2 에 넣는다.
y_max <- max(ycol2)  + 100
View(table)
barplot(ycol2, main=paste(xcol,'과',ycol,'의 막대 그래프'), names.arg=xcol2,
col=c('Green Yellow'), density=80, ylim= c(0,y_max) , beside=T)
}
pie2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('라벨이 되는 컬럼 번호를 입력하세요: ')) # 번호 물어보기
ycol_num <- as.numeric(readline('원형 그래프의 데이터가 될 컬럼 번호를 입력하세요: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
ycol <- colnames(table[ycol_num])   # y축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
ycol2 <- table[,ycol] #  y 축 컬럼의 데이터를 ycol2 에 넣는다.
y_labels <- round( ycol2/ sum(ycol2) *100, 1)
y_labels2 <-paste(xcol2, y_labels, '%')
View(table)
pie( ycol2 , main=paste(ycol ,'의 원형 그래프') , labels=y_labels2, col=rainbow(15) )
}
line2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
ycol_num <- as.numeric(readline('y축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
ycol <- colnames(table[ycol_num])   # y축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
ycol2 <- table[,ycol] #  y 축 컬럼의 데이터를 ycol2 에 넣는다.
y_max2 <- max(ycol2) -1
y_max <- max(ycol2)  +3
View(table)
plot( ycol2, type='o', col='blue', ylim=c(0,y_max), axes=FALSE, ann=FALSE )
axis( 1,  at=1:5,  lab= xcol2 )
axis(2)  # y 축 생성
legend( 2, y_max2,  table , col='blue', cex=0.8, pch=21, lty=1  )
}
my_hist <- function() {
fname <- file.choose()
table <- read.csv(fname, header=T, stringsAsFactor=F )
print(data.table(colnames(table)))
xcol_num <- as.numeric(readline('히스토그램 그래프를 그릴 컬럼을 선택하세요: '))
xcol <- colnames(table[xcol_num])
xcol2 <- table[,xcol]
class1 <- sort(xcol2)
hist(class1 , col="yellow", density=80,
main="히스토그램 정규분포 그래프" )
par(new=T)
plot( class1, dnorm( class1, mean=mean(class1),
sd=sd(class1)),type='l', axes=FALSE, ann=FALSE,
col="red")
View(table)
}
my_box <- function() {
fname <- file.choose()
table <- read.csv(fname, header=T, stringsAsFactor=F )
print(data.table(colnames(table)))
xcol_num <- as.numeric(readline('박스 그래프를 그릴 컬럼번호: '))
xcol <- colnames(table[xcol_num])
xcol2 <- table[,xcol]
result <- boxplot(xcol2)
out_value <-   length(result$out)
box_label <- paste('아웃라이어의 갯수는:', out_value, '개 입니다')
boxplot(xcol2, col="gray", density=80, main=box_label)
}
v2 <- function() {
fname <- file.choose()
table <- read.csv(fname, header=T, stringsAsFactor=F )
View(table)
print(summary(table))
}
sanpodo <- function() {
fname <- file.choose()
table <- read.csv(fname, header=T, stringsAsFactor=F )
print(data.table(colnames(table)))
xcol_num <- as.numeric(readline('x축 컬럼 번호: '))
ycol_num <- as.numeric(readline('y축 컬럼 번호: '))
xcol <- colnames(table[xcol_num])
ycol <- colnames(table[ycol_num])
xcol2 <- table[,xcol]
ycol2 <- table[,ycol]
xcol2[is.na(xcol2)]  <- 0
ycol2[is.na(ycol2)]  <- 0
cor_label <- cor(xcol2, ycol2)
san_label <- paste('상관계수:', round(cor_label,2)  )
View(table)
plot(xcol2,ycol2,
main= san_label,lwd=2, xlab=xcol,ylab=ycol,col='blue',pch=21,bg='blue')
}
pie3 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table2 <- read.csv(fname, header=T, stringsAsFactor=F )
print(data.table(colnames(table2))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num2 <- as.numeric(readline('컬럼 번호: ')) # 번호 물어보기
xcol_num <- colnames(table2[xcol_num2])   # x축 컬럼명을 담는 코드
x <- table(table2[,xcol_num]) / length(table2[,xcol_num])
x2 <- data.frame(x)
names(x2) <- c("col1","col2")
xcol1 <- x2$col1  # x축 컬럼명을 담는 코드
xcol2 <- round(x2$col2,2)#  x 축 컬럼의 데이터를 xcol2 에 넣는다.
x_labels <- paste(xcol1,':',round( xcol2/ sum(xcol2) *100, 1),'%' )
col_cnt <- length(unique(xcol2))
View(table2)
pie( xcol2 , main=paste('원형 그래프') , labels=x_labels, col=rainbow(col_cnt) )
print(summary(table2))
}
x1 <- menu( c('막대 그래프', '원형 그래프', '라인 그래프' ,'히스토그램 그래프',
'박스 그래프', '테이블과 통계정보',
'산포도 그래프', '범주형 원형 그래프' ),
title=" 숫자를 선택하세요 ~ 종료하려면 0번을 누르세요"  )
switch( x1,
gp1 = {   bar()   },
gp2 = {   pie2()  },
gp3 = {   line2() },
gp4 = {   my_hist() },
gp5 = {   my_box() },
gp6 = {   v2()      },
gp7 = { sanpodo()   },
gp8 = {   pie3()    }
)
}
my_func()
source('my_func2222.R')
emp()
source('my_func2222.R')
setwd("/Users/macbook/Documents/itwill/R")
dept <- read.csv("dept.csv")
dept()
dept
emp
r
r()
r()
