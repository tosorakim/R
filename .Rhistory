train_cnt <- round(0.75*dim(wine)[1])
train_index <- sample(1:dim(wine)[1], train_cnt, replace=F) #비복원추출
wine_train <- wine[train_index,  ]
wine_test  <- wine[-train_index, ]
nrow(wine)
#모델을 생성한다
library(RWeka)
model2 <-  JRip(Type~ ., data=wine_train)
model2
summary(model2)
#결과를 예측한다
result2 <- predict( model2, wine_test[   , -1] )
library(gmodels)
CrossTable( wine_test[ , 1],  result2)
#정확도를 구한다
g_m <- CrossTable(wine_test[ ,1], result2)
print(sum(g_m$prop.tbl*diag(3))) #0.8636364
#데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
wine <- read.csv("wine.csv", header=T, stringsAsFactors=TRUE)
nrow(wine) #178
ncol(wine) #14
str(wine)
#하이퍼 파리미터를 지정후,
set.seed(15)
#테스트 데이터와 훈련 데이터를 나눈다
dim(wine) #8124   23
train_cnt <- round(0.75*dim(wine)[1])
train_index <- sample(1:dim(wine)[1], train_cnt, replace=F) #비복원추출
wine_train <- wine[train_index,  ]
wine_test  <- wine[-train_index, ]
nrow(wine)
#모델을 생성한다
library(RWeka)
model2 <-  JRip(Type~ ., data=wine_train)
model2
summary(model2)
#결과를 예측한다
result2 <- predict( model2, wine_test[   , -1] )
library(gmodels)
CrossTable( wine_test[ , 1],  result2)
#정확도를 구한다
g_m <- CrossTable(wine_test[ ,1], result2)
print(sum(g_m$prop.tbl*diag(3))) #0.8636364
#데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
wine <- read.csv("wine.csv", header=T, stringsAsFactors=TRUE)
nrow(wine) #178
ncol(wine) #14
str(wine)
#하이퍼 파리미터를 지정후,
set.seed(14)
#테스트 데이터와 훈련 데이터를 나눈다
dim(wine) #8124   23
train_cnt <- round(0.75*dim(wine)[1])
train_index <- sample(1:dim(wine)[1], train_cnt, replace=F) #비복원추출
wine_train <- wine[train_index,  ]
wine_test  <- wine[-train_index, ]
nrow(wine)
#모델을 생성한다
library(RWeka)
model2 <-  JRip(Type~ ., data=wine_train)
model2
summary(model2)
#결과를 예측한다
result2 <- predict( model2, wine_test[   , -1] )
library(gmodels)
CrossTable( wine_test[ , 1],  result2)
#정확도를 구한다
g_m <- CrossTable(wine_test[ ,1], result2)
print(sum(g_m$prop.tbl*diag(3))) #0.8636364
#데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
wine <- read.csv("wine.csv", header=T, stringsAsFactors=TRUE)
nrow(wine) #178
ncol(wine) #14
str(wine)
#하이퍼 파리미터를 지정후,
set.seed(13)
#테스트 데이터와 훈련 데이터를 나눈다
dim(wine) #8124   23
train_cnt <- round(0.75*dim(wine)[1])
train_index <- sample(1:dim(wine)[1], train_cnt, replace=F) #비복원추출
wine_train <- wine[train_index,  ]
wine_test  <- wine[-train_index, ]
nrow(wine)
#모델을 생성한다
library(RWeka)
model2 <-  JRip(Type~ ., data=wine_train)
model2
summary(model2)
#결과를 예측한다
result2 <- predict( model2, wine_test[   , -1] )
library(gmodels)
CrossTable( wine_test[ , 1],  result2)
#정확도를 구한다
g_m <- CrossTable(wine_test[ ,1], result2)
print(sum(g_m$prop.tbl*diag(3))) #0.8636364
#데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
wine <- read.csv("wine.csv", header=T, stringsAsFactors=TRUE)
nrow(wine) #178
ncol(wine) #14
str(wine)
#하이퍼 파리미터를 지정후,
set.seed(12)
#테스트 데이터와 훈련 데이터를 나눈다
dim(wine) #8124   23
train_cnt <- round(0.75*dim(wine)[1])
train_index <- sample(1:dim(wine)[1], train_cnt, replace=F) #비복원추출
wine_train <- wine[train_index,  ]
wine_test  <- wine[-train_index, ]
nrow(wine)
#모델을 생성한다
library(RWeka)
model2 <-  JRip(Type~ ., data=wine_train)
model2
summary(model2)
#결과를 예측한다
result2 <- predict( model2, wine_test[   , -1] )
library(gmodels)
CrossTable( wine_test[ , 1],  result2)
#정확도를 구한다
g_m <- CrossTable(wine_test[ ,1], result2)
print(sum(g_m$prop.tbl*diag(3))) #0.8636364
#데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
wine <- read.csv("wine.csv", header=T, stringsAsFactors=TRUE)
nrow(wine) #178
ncol(wine) #14
str(wine)
#하이퍼 파리미터를 지정후,
set.seed(49)
#테스트 데이터와 훈련 데이터를 나눈다
dim(wine) #8124   23
train_cnt <- round(0.75*dim(wine)[1])
train_index <- sample(1:dim(wine)[1], train_cnt, replace=F) #비복원추출
wine_train <- wine[train_index,  ]
wine_test  <- wine[-train_index, ]
nrow(wine)
#모델을 생성한다
library(RWeka)
model2 <-  JRip(Type~ ., data=wine_train)
model2
summary(model2)
#결과를 예측한다
result2 <- predict( model2, wine_test[   , -1] )
library(gmodels)
CrossTable( wine_test[ , 1],  result2)
#정확도를 구한다
g_m <- CrossTable(wine_test[ ,1], result2)
print(sum(g_m$prop.tbl*diag(3))) #0.8636364
func_nuclear <- function(x_num) {
x = c(10,20, 30, 40)
y = c(300, 250, 200, 150)
a = cov(x,y) / var(x)
x_mean = mean(x)
y_mean = mean(y)
b = y_mean - a * x_mean
y_hat = b + a * x_num    #             y=b+ax
print(y_hat)
}
func_nuclear(35)
#데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
reg <- read.table("regression.txt", header = T)
reg
str(reg)
reg_func <- function(x_num) {
#데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
reg <- read.table("regression.txt", header = T)
reg
x = c(growth)
y = c(tannin)
a = cov(x,y) / var(x)
x_mean = mean(x)
y_mean = mean(y)
b = y_mean - a * x_mean
y_hat = b + a * x_num    #             y=b+ax
print(y_hat)
}
reg_func(9)
reg_func <- function(x_num) {
#데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
reg <- read.table("regression.txt", header = T)
reg
x = c(regression$growth)
y = c(regression$tannin)
a = cov(x,y) / var(x)
x_mean = mean(x)
y_mean = mean(y)
b = y_mean - a * x_mean
y_hat = b + a * x_num    #             y=b+ax
print(y_hat)
}
reg_func(9)
#데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
reg <- read.table("regression.txt", header = T)
reg
reg_func <- function(x_num) {
x = c(reg$growth)
y = c(reg$tannin)
a = cov(x,y) / var(x) #                기울기
x_mean = mean(x)
y_mean = mean(y)
b = y_mean - a * x_mean #              절편
y_hat = b + a * x_num    #             y=b+ax (y:예상값, b:절편, a:기울기)
print(y_hat)
}
reg_func(9)
#1. 데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
reg <- read.table("regression.txt", header = T)
reg
#2. 데이터를 산포도 그래프로 시각화한다
attach(reg)
plot(growth ~ tannin, data = reg, pch = 21, col = 'blue', bg = 'blue')
model <- lm(growth ~ tannin, data = reg)
model
#4. 2번에서 시각화한 산포도그래프에 회귀직선을 겹쳐서 그립니다. (abline)
attach(reg)
plot(growth ~ tannin, data = reg, pch = 21, col = 'blue', bg = 'blue')
model <- lm(growth ~ tannin, data = reg)
abline(model, col = 'red)
abline(model, col = 'red')
abline(model, col = 'red')
#5. 그래프 제목을 회귀 직선의 방정식으로 출력되게 합니다.
a<-model$coefficients[2] #기울기
b<-model$coefficients[1] #절편
par(family="AppleGothic")
title(paste('성장률=', a, 'x탄닌+', b))
nrow(s_hg)
#1. 데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
s_hg <- read.table("simple_hg.csv", header = T)
#1. 데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
s_hg <- read.table("simple_hg.csv", header = T)
nrow(s_hg)
dim(s_hg)
#2. 데이터를 산포도 그래프로 시각화한다
attach(s_hg)
View(s_hg)
str(s_hg)
dim(s_hg)
#1. 데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
s_hg <- read.table("simple_hg.csv", header = T)
str(s_hg)
dim(s_hg)
#2. 데이터를 산포도 그래프로 시각화한다
attach(s_hg)
plot(input ~ cost, data = s_hg, pch = 21, col = 'blue', bg = 'blue')
#3. 회귀분석을 해서 회귀계수인 기울기와 절편을 구합니다.
#lm: 회귀함수, input 종속변수, cost: 독립변수
model <- lm(input ~ cost, data = s_hg)
model
#4. 회귀직선을 abline으로 시각화 합니다
abline(model, col = 'red')
#5. 그래프 제목을 회귀 직선의 방정식으로 출력되게 합니다.
a<-model$coefficients[2] #기울기
b<-model$coefficients[1] #절편
par(family="AppleGothic")
title(paste('input=', a, 'x cost+', b))
#1. 데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
s_hg <- read.table("simple_hg.csv", header = T)
str(s_hg)
dim(s_hg)
#2. 데이터를 산포도 그래프로 시각화한다
attach(s_hg)
plot(input ~ cost, data = s_hg, pch = 21, col = 'blue', bg = 'blue')
#3. 회귀분석을 해서 회귀계수인 기울기와 절편을 구합니다.
#lm: 회귀함수, input 종속변수, cost: 독립변수
model <- lm(input ~ cost, data = s_hg)
model
#4. 회귀직선을 abline으로 시각화 합니다
abline(model, col = 'red')
#5. 그래프 제목을 회귀 직선의 방정식으로 출력되게 합니다.
a<-model$coefficients[2] #기울기
b<-model$coefficients[1] #절편
par(family="AppleGothic")
title(paste('input=', a, 'x cost+', b))
#1. 데이터를 수집한다
setwd("/Users/macbook/Documents/itwill/R")
s_hg <- read.table("simple_hg.csv", header = T)
str(s_hg)
dim(s_hg)
#2. 데이터를 산포도 그래프로 시각화한다
attach(s_hg)
plot(input ~ cost, data = s_hg, pch = 21, col = 'blue', bg = 'blue')
# 1. Load data
setwd("/Users/macbook/Documents/itwill/R")
reg <- read.csv("simple_hg.csv", header=T)
reg
# cost: 광고비 / input: 매출액
# 2. Visualizing with scatter plot
plot(reg$input ~ reg$cost, data=reg)
# 3. calculate weight, Intercept with regression
model <- lm(reg$input ~ reg$cost, data=reg)
model
launch2 <- read.csv("simple_hg.csv")
attach(launch2)
plot(input ~ cost, data=launch2, pch=21, col='red', bg='red')
m <- lm(input  ~  cost, launch2)
abline(m, col='red')
title(expression‎(italic(input== 2.18649 %*%cost + 62.92913)))
yhat <- predict(m, cost=cost)
join <- function(i)
lines(c(cost[i],cost[i]),c(input[i],yhat[i]), col="green")
sapply(1:19,join)
attach(simple)
plot(input ~ cost)
model <- lm(input ~ cost,data=simple)
abline(model)
title(paste('매출액 =', model$coefficients[1],' + ', model$coefficients[2],'x 광고비'))
# 1. Load data
setwd("/Users/macbook/Documents/itwill/R")
reg <- read.csv("simple_hg.csv", header=T)
reg
# cost: 광고비 / input: 매출액
# 2. Visualizing with scatter plot
plot(reg$input ~ reg$cost, data=reg)
# 3. calculate weight, Intercept with regression
model <- lm(reg$input ~ reg$cost, data=reg)
model
# 1. Load data
setwd("/Users/macbook/Documents/itwill/R")
reg <- read.csv("simple_hg.csv", header=T)
reg
# cost: 광고비 / input: 매출액
# 2. Visualizing with scatter plot
plot(reg$input ~ reg$cost, data=reg)
# 3. calculate weight, Intercept with regression
model <- lm(reg$input ~ reg$cost, data=reg)
abline(model)
title(paste('매출액 =', model$coefficients[1],' + ', model$coefficients[2],'x 광고비'))
launch2 <- read.csv("simple_hg.csv")
attach(launch2)
plot(input ~ cost, data=launch2, pch=21, col='red', bg='red')
m <- lm(input  ~  cost, launch2)
abline(m, col='red')
title(expression(italic(input== 2.18649 %*%cost + 62.92913)))
yhat <- predict(m, cost=cost)
join <- function(i)
lines(c(cost[i],cost[i]),c(input[i],yhat[i]), col="green")
sapply(1:19,join)
#1. 데이터로드
simple <- read.csv("simple_hg.csv")
simple
#2. 데이터를 산포도 그래프로 시각화
attach(simple)
plot( input ~ cost, data=simple, pch=21, col='blue', bg='blue' )
#3. 회귀분석을 해서 회귀계수인 기울기와 절편을 구함
model <- lm( input ~ cost, data=simple )
model
#4. 2번에서 시각화 한 산포도 그래프에 회귀직선을 겹쳐서 그린다
attach(simple)
plot( input ~ cost, data=simple, pch=21, col='blue', bg='blue' )
model <- lm( input ~ cost, data=simple )
abline( model, col='red' )
#5. 그래프 제목을 회귀 직선의 방정식으로 출력
model$coefficients[2]   #기울기
model$coefficients[1]   #절편
title( paste('매출=', model$coefficients[2], 'x광고비 + ', model$coefficients[1] ) )
##1. Load data / details
adver <- read.csv("simple_hg.csv", header=T, stringsAsFactors=T)
str(adver)    #'data.frame':        15 obs. of  3 variables:
#h_year
#cost  : x
#input : y
##2. Visualization
plot( input ~ cost, data=adver, pch=21, col='slategray', bg='slategray')
model <- lm( input ~ cost, data=adver)
abline(model, col='red')
title( paste( "Inclination=", round(model$coefficients[2],3), ", Intercept=", round(model$coefficients[1],3) ) )
attach(adver)
yhat <- predict(model, cost=cost)
join <- function(i)
lines( c(cost[i], cost[i] ), c(input[i], yhat[i]), col="green")
sapply(1:length(yhat), join)
install.packages("cars")
install.packages("car")
library(car)
data(Boston, package = "MASS")
Boston
#모델을 만든다
model <- lm(medv ~. , data = Boston)
cif(model)>10
vif(model)>10
a <- matrix(c(1,2,3,4,5,6), nrow=3, ncol=2, byrow = T)
a
t(a)
t(a)
d
diag(3)
diag(4)
diag(5)
a <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3, byrow = T)
a
b <- diag(3)
b
a%%b
a%*%b
a <- matrix(c(1,2,3,2,2,4), nrow=3, ncol=2, byrow = T)
a
b <- diag(3)
b
a%*%b
a <- matrix(c(1,2,3,4), nrow=2, ncol=2, byrow = T)
a
b <- diag(2)
b
a%*%b
a <- matrix(c(1,2,3,4), nrow=2, ncol=2, byrow = T)
a
solve(a)
a %*% solve(a)
round(a %*% solve(a))
x <- as.matrix(x)
x <- cbind( Intercept=1, x )
solve(t(x) %*% x) %*% t(x) %*% y)
reg <- function(y,x) {
x <- as.matrix(x)
x <- cbind( Intercept=1, x )
b<- solve(t(x) %*% x) %*% t(x) %*% y
colnames(b) <- "estimate"
print(b)
}
setwd("/Users/macbook/Documents/itwill/R/9781788295864_Code/Chapter06")
launch <-read.csv("challenger.csv", header=T)
launch
reg(y=launch$distress_ct, x=launch[ ,2:4])
setwd("/Users/macbook/Documents/itwill/R")
m <-read.csv("multi_hg.csv", header=T)
dim(m)
m <-read.csv("multi_hg.csv", header=T,fileEncoding = "CP949", encoding = "UTF-8")
dim(m)
reg(y=m$만족감, x=m[1:3])
attach(m)
lm(만족감 ~ 외관 + 편의성 + 유용성, data = m)
setwd("/Users/macbook/Documents/itwill/R")
sports <-read.csv("sports.csv", header=T,fileEncoding = "CP949", encoding = "UTF-8")
dim(sports)
View(sports)
sports <-read.csv("sports.csv", header=T)
dim(sports)
View(sports)
str(sports)
summary(sports)
reg(y=sports$acceptance, x=sports[1:3])
head(sports)
reg(y=sports$acceptance, x=sports[2:4])
normalize <- function(x) {
}
normalize <- function(x) {
return((x-min(x)/(max(x)-min(x)))
}
normalize <- function(x) {
return((x-min(x)/(max(x)-min(x)))
}
return( (x-min(x)) / (max(x)-min(x)) )
normalize <- function(x) {
return( (x-min(x)) / (max(x)-min(x)) )
}
reg(y=sports$acceptance, x=sports[2:4])
reg(y=sports$acceptance, x=sports[2:5])
sports <- sports[ , c(2:5)] #학생번호 뺴고 2번쨰 컬럼부터 5번째 컬럼까지(종속변수까지)
sports <- as.data.frame(lapply(sports, normalize))
summary(sports_n)
sports <- sports[ , c(2:5)] #학생번호 뺴고 2번쨰 컬럼부터 5번째 컬럼까지(종속변수까지)
sports_n <- as.data.frame(lapply(sports, normalize))
summary(sports_n)
sports <- sports[ , c(2:5)] #학생번호 뺴고 2번쨰 컬럼부터 5번째 컬럼까지(종속변수까지)
reg(y=sports_n$acceptance, x=sports_n[ , c(1:3)])
sports <- sports[ , c(2:5)] #학생번호 뺴고 2번쨰 컬럼부터 5번째 컬럼까지(종속변수까지)
sports_n <- as.data.frame(lapply(sports, normalize))
summary(sports_n)
reg(y=sports_n$acceptance, x=sports_n[ , c(1:3)])
setwd("/Users/macbook/Documents/itwill/R")
insurance <- read.csv("insurance.csv")
head(insurance)
colSums(is.na(insurance))
hist(insurance$expenses)
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x))  ) }
insurance_n  <- as.data.frame(lapply(insurance[,c(1,3,4,7)]  ,normalize))
summary(insurance_n)
install.packages("psych")
library(psych)
pairs.panels(insurance[ , c('age', 'bmi', 'children', 'expenses') ] )
attach(insurance)
lm(expenses ~ .,  data= insurance)
unique(insurance$region)
model 2 <- lm(expenses ~ .,  data= insurance)
summary(model2)
model2 <- lm(expenses ~ .,  data= insurance)
summary(model2)
insurance$age2 <- insurance$age^2
head(insurance)
model3 <- lm(expenses ~ .,  data= insurance)
summary(model3)
insurance$bmi30 <- ifelse(insurance$bmi >= 30, 1, 0)
insurance
head(insurance)
model4 <- lm(expenses ~ .,  data= insurance)
summary(model4)
model5 <- lm(expenses ~ age + age2 + children + bmi + sex + bmi30*smoker + region,  data= insurance)
summary(model5)
