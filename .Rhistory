}
x1 <- menu( c('막대 그래프', '원형 그래프'),
title=" 숫자를 선택하세요 ~ "  )
switch( x1,
gp1 = {   bar()   },
gp2 = {   pie2()  }
)
}
my_func()
source('my_func.R')
setwd("/Users/macbook/Documents/itwill/R")
source('my_func.R')
data.table(이름=emp[emp$empno %in% emp$mgr, "ename"])
emp <-read.csv("emp3.csv", fileEncoding = "CP949")
data.table(이름=emp[emp$empno %in% emp$mgr, "ename"])
data.table(이름=emp[emp$empno %in% emp$mgr, "ename"])
emp <-read.csv("emp3.csv", fileEncoding = "CP949")
data.table(이름=emp[emp$empno %in% emp$mgr, "ename"])
my_func()
my_func <- function() {
bar <- function() {
fname <- file.choose()
table <- read.csv(fname, header=T, stringsAsFactor=F,  fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table)))
xcol_num <- as.numeric(readline('x축 컬럼 번호: '))
ycol_num <- as.numeric(readline('y축 컬럼 번호: '))
xcol <- colnames(table[xcol_num])
ycol <- colnames(table[ycol_num])
xcol2 <- table[,xcol]
ycol2 <- table[,ycol]
y_max <- max(ycol2)  + 100
barplot(ycol2, main=paste(xcol,'과',ycol,'의 막대 그래프'), names.arg=xcol2,
col=c('Green Yellow'), density=80, ylim= c(0,y_max), beside=T)
par(family="AppleGothic")
}
pie2 <- function(){
fname <- file.choose()
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8")
print(data.table(colnames(table)))
xcol_num <- as.numeric(readline('x축 컬럼 번호: '))
ycol_num <- as.numeric(readline('y축 컬럼 번호: '))
xcol <- colnames(table[xcol_num])
ycol <- colnames(table[ycol_num])
xcol2 <- table[,xcol]
ycol2 <- table[,ycol]
y_labels <- round( ycol2/ sum(ycol2) *100, 1)
y_labels2 <-paste(xcol2, y_labels, '%')
pie( ycol2 , main=paste(ycol ,'의 원형 그래프') , labels=y_labels2, col=rainbow(15) )
}
x1 <- menu( c('막대 그래프', '원형 그래프'),
title=" 숫자를 선택하세요 ~ "  )
switch( x1,
gp1 = {   bar()   },
gp2 = {   pie2()  }
)
}
my_func()
a3 <- factor(a, order=TRUE, levels = c("low","middle","high"))
a3
str(a3)
a[order(a,decreasing=F)]
str(a3)
library(KoNLP)
install.packages("remotes")
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"), force=TRUE)
install.packages(".../path/to/package.tar.gz", type="source", repos=NULL)
library(KoNLP)
install.packages("KoNLP")
library(KoNLP)
#우리가 생각하는 low-middle-high 순으로 순서를 부여함
a3 <- factor(a, order=TRUE, levels = c("low","middle","high"))
a3
a<-c("middle","low","high")
a2<- facter(a)
a[order(a,decreasing=F)]
a2<- facter(a)
a<-c("middle","low","high")
a[order(a,decreasing=F)]
a2<- facter(a)
a2<- factor(a)
a2
#우리가 생각하는 low-middle-high 순으로 순서를 부여함
a3 <- factor(a, order=TRUE, levels = c("low","middle","high"))
a3
str(a3)
wisc<-read.csv("wisc_bc_data.csv", header = T, stringsAsFactors = F)
str(wisc)
$diagnosis
wisc<-read.csv("wisc_bc_data.csv", header = T, stringsAsFactors = F)
str(wisc)
wisc <-  read.csv("wisc_bc_data.csv", header=T, stringsAsFactor=T )
str(wisc)
b<-c("SEVERE","MILD","MODERATE")
b[order(b,decreasing = F)]
b2<-factor(b)
b2
b3<-factor(b, order=TRUE, levels = c("SEVERE","MILD","MODERATE"))
b3
str(b3)
b = factor(c("SEVERE", "MILD", "MODERATE"), order = T, level = c("MILD", "MODERATE", "SEVERE"))
b
b<-factor(b, order=TRUE, levels = c("SEVERE","MILD","MODERATE"))
b
str(b)
b = factor(c("SEVERE", "MILD", "MODERATE"), order = T, levels =  = c("MILD", "MODERATE", "SEVERE"))
b = factor(c("SEVERE", "MILD", "MODERATE"), order = T, level = c("MILD", "MODERATE", "SEVERE"))
b
b<-c("SEVERE","MILD","MODERATE")
b1<- factor( b, order=TRUE, level=c("SEVERE", "MODERATE", "MILD") )
b1
b<-c("SEVERE","MILD","MODERATE")
b[order(b,decreasing = F)]
b2<-factor(b)
b2
b3<-factor(b, order=TRUE, levels = c("SEVERE","MILD","MODERATE"))
b3
str(b3)
b<-c('SEVERE','MODERATE','MILD')
factor(b, order=T, level=c('MILD','MODERATE','SEVERE'))
factor(b, ordered = TRUE, levels =  c('MILD','MODERATE','SEVERE'))
factor(b, ordered = TRUE, levels =  c('MILD','MODERATE','SEVERE'))
b<-c("SEVERE","MILD","MODERATE")
factor(b, ordered = TRUE, levels =  c('MILD','MODERATE','SEVERE'))
b<-c("SEVERE","MILD","MODERATE")
factor(b, ordered = TRUE, levels =  c("SEVERE","MILD","MODERATE"))
install.packages("DBI")
install.packages("RJDBC")
library("DBI")
library("RJDBC")
library("DBI")
library("RJDBC")
driver <-  JDBC("oracle.jdbc.driver.OracleDriver", "ojdbc8.jar")
oracle_db <- dbConnect( driver, 'jdbc:oracle:thin:@//127.0.0.1:1522/xe', 'scott', 'tiger')
car<-read.csv("usedcars.csv")
library("utily") ???
setwd("/Users/macbook/Documents/itwill/R")
library("utily") ???
setwd("/Users/macbook/Documents/itwill/R/9781788295864_Code/Chapter02")
library("utily") ???
setwd("/Users/macbook/Documents/itwill/R/9781788295864_Code/Chapter02")
library("utily") ???
setwd("/Users/macbook/Documents/itwill/R/9781788295864_Code/Chapter02")
cars<-read.csv("usedcars.csv")
car
summary(car)
install.packages("outlines")
install.packages("outliers")
library("outliars")
library("outliers")
setwd("/Users/macbook/Documents/itwill/R/9781788295864_Code/Chapter02")
usedcars<-read.csv("usedcars.csv")
View(usedcars)
car<-read.csv("usedcars.csv")
car
summary(car)
library("outliers")
outlier(car$price)
x2<-boxplot(car$price)
x2$out
summary(car$price)
summary(car$mileage)
outlier(car$mileage)
line2()
library(data.table)
line2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
ycol_num <- as.numeric(readline('y축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
ycol <- colnames(table[ycol_num])   # y축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
ycol2 <- table[,ycol] #  y 축 컬럼의 데이터를 ycol2 에 넣는다.
y_max2 <- max(ycol2) -1
y_max <- max(ycol2)  +3
plot( ycol2, type='o', col='blue', ylim=c(0,y_max), axes=FALSE, ann=FALSE )
axis( 1,  at=1:5,  lab= xcol2 )
axis(2)  # y 축 생성
legend( 2, y_max2,  table , col='blue', cex=0.8, pch=21, lty=1  )
}
line2()
line2()
install.packages("fBasics")
library("fBasics")
skewness(car$mileage)
driver <-  JDBC("oracle.jdbc.driver.OracleDriver", "ojdbc8.jar")
oracle_db <- dbConnect( driver, 'jdbc:oracle:thin:@//127.0.0.1:1522/xe', 'scott', 'tiger')
oracle_db <- dbConnect( driver, 'jdbc:oracle:thin:@//127.0.0.1:1521/xe', 'scott', 'tiger')
library("utily") ???
emp_query <- 'select * from emp'
library("utily") ???
setwd("/Users/macbook/Documents/itwill/R")
library("utily") ???
setwd("/Users/macbook/Documents/itwill/R")
library("utily") ???
setwd("/Users/macbook/Documents/itwill/R")
setwd("/Users/macbook/Documents/itwill/R")
emp<-read.csv("emp3.csv")
emp_query <- 'select * from emp'
emp_data <- dbGetQuery( oracle_db, emp_query)
emp_data
emp_data
plot(emp$comm, emp$sal, pch=21, col='red', bg='red')
plot(car$mileage, car$sal,col='red', bg='red')
plot(car$mileage, car$sal, pch=21, col='red', bg='red')
plot(car$mileage, car$price, col='red', bg='red')
plot(car$mileage,  pch=21, car$price, col='red', bg='red')
plot(car$mileage, car$price,  pch=21, col='red', bg='red')
plot(car$mileage, car$price,  pch=21, col='red')
plot(car$mileage, car$price,  pch=22, col='red', bg='red')
plot(car$mileage, car$price,  pch=20, col='red', bg='red')
plot(car$mileage, car$price,  pch=21, col='red', bg='red')
plot(car$mileage, car$price,  pch=20, col='red', bg='red')
plot(car$mileage, car$price,  pch=19, col='red', bg='red')
plot(car$mileage, car$price,  pch=21, col='red', bg='red')
plot(car$mileage, car$price,  pch=1, col='red', bg='red')
plot(car$mileage, car$price,  pch=2, col='red', bg='red')
plot(car$mileage, car$price,  pch=3, col='red', bg='red')
plot(car$mileage, car$price,  pch=4, col='red', bg='red')
plot(car$mileage, car$price,  pch5, col='red', bg='red')
plot(car$mileage, car$price,  pch=5, col='red', bg='red')
plot(car$mileage, car$price,  pch=6, col='red', bg='red')
plot(car$mileage, car$price,  pch=1, col='red', bg='red')
plot(car$mileage, car$price,  pch=1, col='red', bg='yellow')
plot(car$mileage, car$price,  pch=21, col='red', bg='yellow')
plot(car$mileage, car$price,  pch=31, col='red', bg='yellow')
2
plot(car$mileage, car$price,  pch=21, col='red', bg='yellow')
plot(car$mileage, car$price,  pch=3, col='red', bg='yellow')
plot(car$mileage, car$price,  pch=21, col='red', bg='yellow')
car(car$mileage, car$price)
cor(car$mileage, car$price)
install.packages("gmodles")
library(gmodels)
library(gmodles)
install.packages("gmodles")
install.packages("gmodels")
library(gmodels)
attach(emp)
tapply(empno, list(deptno,job), length, default = 0)
CrossTable(x=emp$deptno, y=emp$job)
CrossTable(x=emp$deptno, y=emp$job, chisq = TRUE)
library(data.table)
data.table(emp$sal, emp$sal >= 2500)
emp$sal_tf<-emp$sal >= 2500
emp
emp
CrossTable(emp$job, emp$sal_tf)
emp_query <- 'select * from emp'
emp_data <- dbGetQuery( oracle_db, emp_query)
emp_data
oracle_db <- dbConnect( driver, 'jdbc:oracle:thin:@//127.0.0.1:1521/xe', 'system', 'oracle')
emp_query <- 'select * from emp'
emp_data <- dbGetQuery( oracle_db, emp_query)
emp_data
data.table( 이름=emp$ename, 월급=emp$sal,
순위= rank(-emp$sal, ties.method="min")  )
x <-  data.table( 이름=emp$ename, 월급=emp$sal,
순위= rank(-emp$sal, ties.method="min")  )
x
library(doBy)
orderBy( ~ 순위, x )
x <- data.table( 이름=emp$ename, 월급=emp$sal,
순위=dense_rank(-emp$sal)  )
library(doBy)
orderBy( ~순위, x )
setwd("/Users/macbook/Documents/itwill/R")
create_cnt<-read.csv("창업건수.csv", fileEncoding = "CP949", encoding = "UTF-8", head=TRUE)
drop_cnt<-read.csv("폐업건수.csv", fileEncoding = "CP949", encoding = "UTF-8", head=TRUE)
create_cnt
Veiw(create_cnt)
View(create_cnt)
barplot( create_cnt$치킨, main="년도별 치킨집 창업건수",
names.arg=create_cnt$년도,  col="Green Yellow", density=80,
ylim=c(0,1600)  )
head(create_cnt)
barplot(creat_cnt$커피, names.arg=create_cnt$년도)
barplot(create_cnt$커피, names.arg=create_cnt$년도)
barplot( create_cnt$치킨, main="년도별 치킨집 창업건수",
names.arg=create_cnt$년도,  col="Green Yellow", density=80,
ylim=c(0,1600)  )
barplot(create_cnt$커피, names.arg=create_cnt$년도)
barplot( create_cnt$치킨, main="년도별 치킨집 창업건수",
names.arg=create_cnt$년도,  col="Green Yellow", density=80,
ylim=c(0,1600)  )
barplot(create_cnt$커피, names.arg=create_cnt$년도)
barplot(create_cnt$카페, names.arg=create_cnt$년도)
x <- rbind( create_cnt$치킨집, drop_cnt$치킨집)
x
barplot(x, names.arg=create_cnt$년도)
barplot( x , main="년도별 치킨집 폐업건수",
names.arg=drop_cnt$년도,  col= c("Green Yellow","Hot pink") ,
density=80, ylim=c(0,4000) , beside=T )
barplot(x, names.arg=create_cnt$년도)
barplot( x , main="년도별 치킨집 폐업건수",
names.arg=drop_cnt$년도,  col= c("Green Yellow","Hot pink") ,
density=80, ylim=c(0,4000) , beside=T )
barplot(x, names.arg=create_cnt$년도)
barplot( x , main="년도별 치킨집 폐업건수",
names.arg=drop_cnt$년도,  col= c("Green Yellow","Hot pink") ,
density=80, ylim=c(0,4000) , beside=T )
barplot(x, names.arg=create_cnt$년도, beside = T)
barplot( x , main="년도별 치킨집 폐업건수",
names.arg=drop_cnt$년도,  col= c("Green Yellow","Hot pink") ,
density=80, ylim=c(0,4000) , beside=T )
barplot(x, names.arg=create_cnt$년도, beside = T)
barplot( x , main="년도별 치킨집 폐업건수",
names.arg=drop_cnt$년도,  col= c("Green Yellow","Hot pink") ,
density=80, ylim=c(0,4000) , beside=T )
barplot(x, names.arg=create_cnt$년도, beside = T)
barplot(x, names.arg=create_cnt$년도, beside = T, ylim=4000)
barplot(x, names.arg=create_cnt$년도, beside = T, ylim=c(0,4000))
barplot(x, names.arg=create_cnt$년도, beside = T, ylim=c(0,4000,500))
barplot(x, names.arg=create_cnt$년도, beside = T)
barplot(x, names.arg=create_cnt$년도)
my_func()
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),ylim=c(0,1600) col=rainbow(20), density = 60, angle = 90, border="black" )
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),ylim=c(0,1600) ,col=rainbow(20), density = 60, angle = 90, border="black" )
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),ylim=c(0,16000) ,col=rainbow(20), density = 60, angle = 90, border="black" )
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),ylim=c(0,100) ,col=rainbow(20), density = 60, angle = 90, border="black" )
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),ylim=c(0,80) ,col=rainbow(20), density = 60, angle = 90, border="black" )
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),
col=rainbow(20), density = 60, angle = 90, border="black" )
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000), col=rainbow(20), density = 60, angle = 90, border="black" )
hist(usedcars$mileage, at=seq(0, 160000, by=20000), breaks= seq(0, 160000, by=20000) )
axis(2)
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000), col=rainbow(20), density = 60, angle = 90, border="black" )
axis(2)
max_m = max(usedcars$mileage)*1.1
주행거리=usedcars$mileage
hist( 주행거리, 
, breaks=seq(0, max_m , by=10000) , at=seq(0, max_m ,by=10000), main="중고차 주행거리", col='orange', density=80 )
hist( 주행거리, 
, breaks=seq(0, max_m , by=10000) , at=seq(0, max_m ,by=10000), main="중고차 주행거리", col='orange', density=80 , border="black")
axis(2)
col.axis('red')
axis(1)
hist(usedcars$mileage, at=seq(0, 160000, by=20000), breaks= seq(0, 160000, by=20000) )
axis(2)
axis(1)
axis(3)
axis(4)
axis(5)
axis(21)
axis(4)
axis(0)
axis(2)
axis(2)
hist(usedcars$mileage, at=seq(0, 160000, by=20000), breaks= seq(0, 160000, by=20000) )
axis(2)
hist(usedcars$mileage, at=seq(0, 160000, by=20000), breaks= seq(0, 160000, by=20000) )
axis(4)
hist(usedcars$mileage, at=seq(0, 160000, by=20000), breaks= seq(0, 160000, by=20000) )
axis(3)
hist(usedcars$mileage, at=seq(0, 160000, by=20000), breaks= seq(0, 160000, by=20000) )
axis(10)
hist(usedcars$mileage, at=seq(0, 160000, by=20000), breaks= seq(0, 160000, by=20000) )
axis(1)
hist(usedcars$mileage, at=seq(0, 160000, by=20000), breaks= seq(0, 160000, by=20000) )
axis(2)
library(rJava)
library(rJava)
library(KoNLP)
library(wordcloud)
library(plyr)
library(wordcloud)
useSejongDic()   # 세종 사전에 있는 한글을 R 로 로드하는 명령어
setwd("d:\\data")  # 워킹디렉토리를 소환
winter <- readLines('winter.txt')
setwd("/Users/macbook/Documents/itwill/R")  # 워킹디렉토리를 소환
winter <- readLines('winter.txt')
setwd("/Users/macbook/Documents/itwill/R")  # 워킹디렉토리를 소환
winter <- readLines('winter.txt')
nouns <- extractNoun(winter)   # 명사 단어만 추출
winter <- readLines('winter.txt')
View(winter)
nouns <- extractNoun(winter)   # 명사 단어만 추출
nouns <- unlist(nouns)
nouns <- nouns[nchar(nouns)>=2]  #  단어중에 2철자 이상인것만
cnouns <- count(nouns)  # 단어별 건수를 출력한다.
useSejongDic()   # 세종 사전에 있는 한글을 R 로 로드하는 명령어
install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools'), type = "binary")
install.packages("remotes")
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"), force=TRUE)
library(KoNLP)
useSejongDic() # 3:none
library(KoNLP)
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"), force=TRUE)
.libPaths()
library(KoNLP)
useSejongDic() # 3:none
.libPaths()
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"), force=TRUE)
par("mar")
par("mgp")
par("las")
set.seed(5)
x <- rnorm(200)
y <- 25 - 22*x + 5*x^2 + rnorm(200)
png("par-120208-01.png")
plot(x, y, main="defaults")
dev.off()
png("par-120208-02.png")
par(mar=c(3.5, 3.5, 2, 1))
plot(x, y, main="par(mar=c(3.5, 3.5, 2, 1))")
dev.off()
png("par-120208-03.png")
par(mar=c(3.5, 3.5, 2, 1), mgp=c(2.4, 0.8, 0))
plot(x, y, main="par(mar=c(3.5, 3.5, 2, 1), mgp=c(2.4, 0.8, 0))")
dev.off()
png("par-120208-04.png")
par(mar=c(3.5, 3.5, 2, 1), mgp=c(2.4, 0.8, 0), las=1)
plot(x, y, main="par(mar=c(3.5, 3.5, 2, 1), mgp=c(2.4, 0.8, 0), las=1)")
dev.off()
pdf("par-120208.pdf")
plot(x, y, main="defaults")
par(mar=c(3.5, 3.5, 2, 1))
plot(x, y, main="par(mar=c(3.5, 3.5, 2, 1))")
par(mar=c(3.5, 3.5, 2, 1), mgp=c(2.4, 0.8, 0))
plot(x, y, main="par(mar=c(3.5, 3.5, 2, 1), mgp=c(2.4, 0.8, 0))")
par(mar=c(3.5, 3.5, 2, 1), mgp=c(2.4, 0.8, 0), las=1)
plot(x, y, main="par(mar=c(3.5, 3.5, 2, 1), mgp=c(2.4, 0.8, 0), las=1)")
dev.off()
par("mar")
par("mgp")
par("las")
set.seed(5)
x <- rnorm(200)
y <- 25 - 22*x + 5*x^2 + rnorm(200)
png("par-120208-01.png")
plot(x, y, main="defaults")
dev.off()
png("par-120208-02.png")
par(mar=c(3.5, 3.5, 2, 1))
plot(x, y, main="par(mar=c(3.5, 3.5, 2, 1))")
dev.off()
png("par-120208-03.png")
par(mar=c(3.5, 3.5, 2, 1), mgp=c(2.4, 0.8, 0))
plot(x, y, main="par(mar=c(3.5, 3.5, 2, 1), mgp=c(2.4, 0.8, 0))")
dev.off()
png("par-120208-04.png")
par(mar=c(3.5, 3.5, 2, 1), mgp=c(2.4, 0.8, 0), las=1)
plot(x, y, main="par(mar=c(3.5, 3.5, 2, 1), mgp=c(2.4, 0.8, 0), las=1)")
dev.off()
install.packages("RStudioGD")
png("par-120208-01.png")
plot(x, y, main="defaults")
dev.off()
data <- data.frame(x = c("A", "B", "C", "D", "E"),            # Create example data
y = c(0.3, 0.8, 0.9, 0.2, 0.6))
library("ggplot2")                                            # Load ggplot2 package
ggp <- ggplot(data, aes(x, y, fill = y)) +                    # ggplot2 with default settings
geom_bar(stat = "identity")
ggp                                                           # Print brachart
plot(emp$comm, emp$sal, pch=21, col='red', bg='red')
data <- data.frame(x = emp$sal),            # Create example data
y = emp$comm)
library(data.frame)
library("data.frame")
library("data.frame")
wisc<-read.csv("wisc_bc_data.csv", header = T, stringsAsFactors = F)
str(wisc)
wisc <-  read.csv("wisc_bc_data.csv", header=T, stringsAsFactor=T )
str(wisc)
b<-c("SEVERE","MILD","MODERATE")
b[order(b,decreasing = F)]
b2<-factor(b)
b2
b3<-factor(b, order=TRUE, levels = c("SEVERE","MILD","MODERATE"))
b3
str(b3)
b = factor(c("SEVERE", "MILD", "MODERATE"), order = T, level = c("MILD", "MODERATE", "SEVERE"))
b
emp_query <- 'select * from emp'
emp_data <- dbGetQuery( oracle_db, emp_query)
emp_data
oracle_db <- dbConnect( driver, 'jdbc:oracle:thin:@//127.0.0.1:1521/xe', 'system', 'oracle')
source('my_func.R')
source('my_func22.R')
setwd("/Users/macbook/Documents/itwill/R")
source('my_func22.R')
r <- function() { source('my_func.R') }
r
r <- function() { source('my_func.R') }
r
r()
open ~/.Rprofile
setwd("/Users/macbook/Documents/itwill/R")
library(utils)
emp <- read.csv("emp.csv", header=T, stringsAsFactor=T )
emp()
emp <- read.csv("emp3.csv", header=T, stringsAsFactor=T )
emp()
niv <- readLines("NIV.txt")
niv
install.packages("xlsx")
library(xlsx)
dept <-  read.xlsx("dept.XLS", 1 )
car$conservation<-car$color %in% c("Black","Gray","Silver","White")
car
CrossTable(car$model,car$conservation)
library(gmodels)
CrossTable(car$model,car$conservation)
car$bosoo<-car$color %in% c("Black","Gray","Silver","White")
table(car$bosoo)
CrossTable(car$model, car$bosoo)
car$BGSW1 = (car$color %in% c("Black", "Gray","Silver","White"))
CrossTable(car$model, car$BGSW1)
CrossTable('모델'=car$model,'보수색'=car$conservation)
CrossTable(모델=car$model,보수색=car$conservation)
