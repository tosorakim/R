summary(usedcars)
#중고차 가격에 대해서 히스토그램 그래프를 그리면
hist(usedcars$price)
#bin을 이쁘게 분할해보면,
hist(usedcars$price, breaks=seq(0,22000,by=2000))
#bin을 이쁘게 분할해보면,
hist(usedcars$price, breaks=seq(0,28000,by=2000))
#bin을 이쁘게 분할해보면,
hist(usedcars$price, breaks=seq(0,26000,by=2000))
#중고차 가격에 대해서 히스토그램 그래프를 그리면,
hist(usedcars$price)
#bin을 이쁘게 분할해보면,
hist(usedcars$price, breaks=seq(0,26000,by=2000))
#중고차 가격에 대해서 히스토그램 그래프를 그리면,
hist(usedcars$price)
#bin을 이쁘게 분할해보면,
hist(usedcars$price, breaks=seq(0,26000,by=2000))
#x축 bin을 이쁘게 분할해보면,
hist(usedcars$price, breaks=seq(0,26000,by=1000))
#x축 bin을 이쁘게 분할해보면,
hist(usedcars$price, breaks=seq(0,26000,by=5000))
#x축 bin을 이쁘게 분할해보면,
hist(usedcars$price, breaks=seq(0,26000,by=2000))
#x축 bin의 sequence를 좀 더 이쁘게 조정해보면,
hist(usedcars$price, breaks=seq(0,26000,by=2000))
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, breaks=seq(0,26000,by=2000), border=white)
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, breaks=seq(0,26000,by=2000), border="white")
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, breaks=seq(0,26000,by=2000), col="grey" border="white")
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, breaks=seq(0,26000,by=2000), col="grey", border="white")
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by2000), breaks=seq(0,26000,by=2000))
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000))
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000),col="grey", border="white")
h<-hist(usedcars$price,ylim=c(0,40))
h
h<-hist(usedcars$price,ylim=c(0,40))
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, breaks=seq(0,26000,by=2000), col="grey", border="white")
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, breaks=seq(0,26000,by=2000), col="grey", border="white")
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000))
text(x$mids, x$counts, labels=x$counts, adj=c(0.5,-0.5))
text(x$price)
x<-hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000))
text(x$price)
text(x$mids)
text(labels=x$counts)
text(labels=x$counts)
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000))
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(14))
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(14), density = 80)
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(14), density = 80, angle = 90)
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(14), density = 80, angle = 180)
9
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(14), density = 80, angle = 90)
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(14), density = 80, angle = 90, border="white")
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(14), density = 80, angle = 90, border="black")
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(10), density = 80, angle = 90, border="black")
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(11), density = 80, angle = 90, border="black")
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(12), density = 80, angle = 90, border="black")
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(18), density = 80, angle = 90, border="black")
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(10), density = 80, angle = 90, border="black")
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(12), density = 80, angle = 90, border="black")
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(11), density = 80, angle = 90, border="black")
hist(usedcars$mileage, at=seq(0,160000,by=2000),breaks=seq(0,160000,by=2000) )
#각 컬럼들의 데이터에 대한 통계 정보
summary(usedcars)
#중고차 가격에 대해서 히스토그램 그래프를 그리면,
hist(usedcars$price)
#각 컬럼들의 데이터에 대한 통계 정보
summary(usedcars)
#커스텀 옵션을 주면,
hist(usedcars$mileage, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(11), density = 80, angle = 90, border="black")
#커스텀 옵션을 주면,
hist(usedcars$mileage, col=rainbow(11), density = 80, angle = 90, border="black")
hist(usedcars$mileage, at=seq(0,160000,by=2000),breaks=seq(0,160000,by=2000) )
hist(usedcars$mileage, at=seq(0,160000,by=5000),breaks=seq(0,160000,by=5000) )
hist(usedcars$mileage, at=seq(0,160000,by=1000),breaks=seq(0,160000,by=1000) )
hist(usedcars$mileage, at=seq(0,160000,by=10000),breaks=seq(0,160000,by=10000) )
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000) )
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(11), density = 80, angle = 90, border="black" )
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 80, angle = 90, border="black" )
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 70, angle = 90, border="black" )
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
#breaks 옵션을 사용해서 간격을 조정해보면,
hist(usedcars$price, at=seq(0,24000,by=2000), breaks=seq(0,26000,by=2000), col=rainbow(11), density = 80, angle = 90, border="black")
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
hist(usedcars$mileage, axes=F)
axis(1, at=seq(0,160000, 20000))
axis(2)
a<-hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
text(a$mids,a$counts+0.5,labels=a$counts)
a<-hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
text(a$mids,a$counts+20000,labels=a$counts)
text(a$mids,a$counts+1,labels=a$counts)
text(a$mids,a$counts+1.5,labels=a$counts)
text(a$mids,a$counts+1,labels=a$counts)
a<-hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
text(a$mids,a$counts+1,labels=a$counts)
#각 컬럼들의 데이터에 대한 통계 정보
summary(usedcars)
a<-hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
text(a$mids,a$counts+1,labels=a$counts,"%")
text(a$mids,a$counts+1,labels=a$counts,'%')
a<-hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
text(a$mids,a$counts+1,labels=a$counts,'%')
library(patternplot)
library(patternplot)
library(ggplot2)
library(jpeg)
Tomato <-  readJPEG(system.file("img", "tomato.jpg", package="patternplot"))
hist2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
}
hist2()
hist2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
hist(xclo2, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
}
hist2()
hist2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
hist(xcol2, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
}
hist2()
hist2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
hist(xcol2, main=paste(xcol2,'의 히스토그램 그래프') at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
}
hist2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
hist(xcol2, main=paste(xcol2,'의 히스토그램 그래프'), at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
}
hist2()
hist2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
max_m = max(xcol2)*1.1
hist( xcol2 , main= paste(xcol,'의 히스토그램 그래프') , col='orange', density=80 )
}
hist2()
hist2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
max_m = max(xcol2)*1.1
hist( xcol2 , main= paste(xcol,'의 히스토그램 그래프') , col='orange', density=80 )
par(family="AppleGothic")
}
hist2()
hist2()
hist2()
hist2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
max_m = max(xcol2)*1.1
hist( xcol2 , main= paste(xcol,'의 히스토그램 그래프') , at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
par(family="AppleGothic")
}
hist2()
hist2()
hist2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
max_m = max(xcol2)*1.1
hist( xcol2 , main= paste(xcol,'의 히스토그램 그래프') , col='orange', density=80 , at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black")
par(family="AppleGothic")
}
hist2()
hist2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
max_m = max(xcol2)*1.1
hist( xcol2 , main= paste(xcol,'의 히스토그램 그래프') , at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black")
par(family="AppleGothic")
}
hist2()
hist2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
max_m = max(xcol2)*1.1
hist( xcol2 , main= paste(xcol,'의 히스토그램 그래프') , col='orange', density=80 )
par(family="AppleGothic")
}
hist2()
hist2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
max_m = max(xcol2)*1.1
hist( xcol2 , main= paste(xcol,'의 히스토그램 그래프') , breaks=seq(0,160000,by=20000), col='orange', density=80 )
par(family="AppleGothic")
}
hist2()
hist2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
max_m = max(xcol2)*1.1
hist( xcol2 , main= paste(xcol,'의 히스토그램 그래프') , col='orange', density=80 )
par(family="AppleGothic")
}
hist2()
mean(x1)
mean(x2)
mean(x3)
mean(x1)
ls()
rm(x,x1,x2,x3)
mean(x1)
mean(x1)
x1 <- c(7,8,9,9,10,10,11,11,12,13)
x2 <- c(7,9,9,10,10,10,10,11,11,13 )
x3 <- c(1,1,7,7,10,10,10,11,13,30 )
mean(x1)
mean(x2)
mean(x3)
median(x1)
median(x2)
median(x3)
names(table(x1))
table(x1)
#x1선수의 최빈값
names(table(x1))[table(x1)==max(table(x1))]
#각 선수의 최빈값
names(table(x1))[table(x1)==max(table(x1))]
names(table(x2))[table(x1)==max(table(x2))]
names(table(x3))[table(x1)==max(table(x3))]
#각 선수의 최빈값
names(table(x1))[table(x1)==max(table(x1))]
names(table(x2))[table(x2)==max(table(x2))]
names(table(x3))[table(x3)==max(table(x3))]
range(x1)
range(x2)
range(x3)
#데이터의 폭을 확인하려면,
range(x1)
range(x2)
range(x3)
boxplot(x3)
a<-boxplot(x3)
a
a$stats
boxplot(x1,x2,x3)
#분산값과 표준편차
var(x1)
var(x2)
sd(x1)
sd(x2)
a<-boxplot(usedcars$price)
a$stats
a$stats
#이상치 확인
a$out
quantile(usedcars$price)
IQR(usedcars$price)
quantile(usedcars$price)
library(maps)
library(mappro)
install.packages("maps")
library(maps)
install.packages("mapproj")
library(mappro)
install.packages("mapproj")
map("world")
mpa("world","china")
map("world","china")
map("world","usa")
library(mapproj)
map("world","america")
install.packages("usmap")
library(usmap) #import the package
library(ggplot2) #use ggplot2 to add layer for visualization
library(usmap) #import the package
install.packages("usmap")
library(usmap) #import the package
library(ggplot2) #use ggplot2 to add layer for visualization
plot_map(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
map(regions = "states") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
map("world","usa") +
labs(title = "U.S. States",
subtitle = "This is a blank map of the United States.") +
theme(panel.background=element_blank())
library(mapdata)
install.packages(mapdata)
usa
usa<-map("world","usa")
usa
usa<-map("world","usa", exclude=c("Hawaii","Alaska"))
usa
usa(exclude=c("Hawaii","Alaska"))
usa<-map("world","usa")
usa(exclude=c("Hawaii","Alaska"))
usa<-map("world","usa", exclude=c("Hawaii","Alaska"))
usa
library(tidyverse)
install.packages(tidyverse)
install.packages(rgdal)
install.packages(maptools)
install.packages(rgeos)
install.packages(mapproj)
install.packages(mapproj)
install.packages(mapproj)
library(maps)
install.packages(mapproj)
library(mapproj)
library(rgeos)
filter(State %in% states$STUSPS) %>% mutate(State=factor(State))
df1 <- merge(states, my_counts, by.x="STUSPS", by.y="State", all.x=TRUE, suffixes = c(".x",".y"))
#make map
map <- leaflet(df1)
pal <- colorNumeric(
palette = "YlGnBu",
domain = df1$count
)
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(count)
) %>%
addLegend("topright", pal = pal, values = ~count,
title = "Count",
opacity = 1
) %>% setView(lng = -100.0167, lat = 50.8833, zoom = 3)
install.packages(setView)
x = c("ggplot2", "rgdal", "maptools", "mapproj", "rgeos")
lapply(x, library, character.only = TRUE)
install.packages(rgdal)
library(usmap)
library(maps)
library(mapproj)
plot_usmap(data = statepop, values = "pop_2015",
exclude = c("AK","HI"))
map(data = statepop, values = "pop_2015",
exclude = c("AK","HI"))
map("world","usa")
usa
library(usmaps)
library(usmap)
install.packages(usmap)
install.packages(usmaps)
map("world","usa", data = statepop, values = "pop_2015",
exclude = c("AK","HI"))
map("world","usa",exclude = c("AK","HI"))
plot(exclude = c("Alaska","Hawaii"))
library(rJava)
install.packages("rJava")
library(rJava)
install.packages("KoNLP")
install.packages("wordcloud")
install.packages("plyr")
library(KoNLP)
library(wordcloud)
library(plyr)
library(KoNLP)
install.packages("KoNLP")
library(KoNLP)
install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools'), type = "binary")
install.packages(c("stringr", "hash", "tau", "Sejong", "RSQLite", "devtools"), type = "binary")
install.packages("remotes")
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"), force=TRUE)
library(KoNLP)
install.packages(".../path/to/package.tar.gz", type="source", repos=NULL)
install.packages("~/Documents/itwill/R/java/jhannanum.jar", repos = NULL)
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black" )
lines(density(ahot))
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black", ylim = c(0,60) )
hist(usedcars$mileage, at=seq(0,160000,by=20000),breaks=seq(0,160000,by=20000),col=rainbow(20), density = 60, angle = 90, border="black", ylim = c(0,70) )
library(rJava)
library(rJava)
useSejongDic()   # 세종 사전에 있는 한글을 R 로 로드하는 명령어
setwd("d:\\data")  # 워킹디렉토리를 소환
winter <- readLines('winter.txt')
nouns <- extractNoun(winter)   # 명사 단어만 추출
nouns <- unlist(nouns)
nouns <- nouns[nchar(nouns)>=2]  #  단어중에 2철자 이상인것만
cnouns <- count(nouns)  # 단어별 건수를 출력한다.
# 색깔 추가
pal <- brewer.pal(6,"Dark2")
pal <- pal[-(1)]
# 글씨 폰트 설정
windowsFonts(malgun=windowsFont("맑은 고딕"))
wordcloud( words=cnouns$x,   # 단어
freq=cnouns$freq,      # 단어 빈도수
colors=pal,               # 색깔
min.freq=3,              # 빈도수가 3개 이상인것만 시각화
random.order=F,       # F 로 하게 되면 큰글씨부터 출력이 되면서
family="malgun")      # 중앙에서 퍼지게 한다.
# 맑음 글씨체로 시각화 하겠다.
IQR(usedcars$price)
a<-boxplot(usedcars$price)
line2()
line2()
line2 <- function() {      # R 에서 함수 만드는 코드
fname <- file.choose()  #  윈도우 탐색기 여는 코드
table <- read.csv(fname, header=T, stringsAsFactor=F, fileEncoding = "CP949", encoding = "UTF-8" )
print(data.table(colnames(table))) # 컬럼명을 번호와 함께 출력하는 코드
xcol_num <- as.numeric(readline('x축 컬럼 번호: ')) # 번호 물어보기
ycol_num <- as.numeric(readline('y축 컬럼 번호: ')) # 번호 물어보기
xcol <- colnames(table[xcol_num])   # x축 컬럼명을 담는 코드
ycol <- colnames(table[ycol_num])   # y축 컬럼명을 담는 코드
xcol2 <- table[,xcol] #  x 축 컬럼의 데이터를 xcol2 에 넣는다.
ycol2 <- table[,ycol] #  y 축 컬럼의 데이터를 ycol2 에 넣는다.
y_max2 <- max(ycol2) -1
y_max <- max(ycol2)  +3
plot( ycol2, type='o', col='blue', ylim=c(0,y_max), axes=FALSE, ann=FALSE )
axis( 1,  at=1:5,  lab= xcol2 )
axis(2)  # y 축 생성
legend( 2, y_max2,  table , col='blue', cex=0.8, pch=21, lty=1  )
}
line2()
library(data.table)
line2()
my_func()
libPaths()
ls()
path()
.libPaths()
library(wordcloud)
library(plyr)
library(KoNLP)
install.packages("~/Documents/itwill/R/KoNLP/KoNLP/java/jhannanum.jar", repos = NULL)
install.packages("~/Documents/itwill/R/KoNLP/KoNLP/java/junit-4.10.jar", repos = NULL)
emotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"), force=TRUE)
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"), force=TRUE)
.libPaths()
sessionInfo()
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
